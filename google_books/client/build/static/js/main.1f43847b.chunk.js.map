{"version":3,"sources":["components/Header/index.js","components/SearchArea/index.js","components/BookCard/index.js","components/BookList/index.js","components/Books/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","icon","faBookOpen","className","SearchArea","props","onSubmit","searchBook","action","onChange","handleSearch","type","BookCard","src","image","alt","title","author","published","BookList","books","map","book","i","key","volumeInfo","imageLinks","thumbnail","authors","publishedDate","Books","e","preventDefault","request","get","query","q","state","searchField","then","data","console","log","setState","body","items","target","value","this","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wRAaeA,EATA,WACX,OACI,gCACI,kBAAC,IAAD,CAAiBC,KAAMC,IAAYC,UAAU,UAC7C,8C,wCCKGC,EAXI,SAACC,GAChB,OACI,yBAAKF,UAAU,eACX,0BAAMG,SAAUD,EAAME,WAAYC,OAAO,IACrC,2BAAOC,SAAUJ,EAAMK,aAAcC,KAAK,SAC1C,4BAAQA,KAAK,UAAb,a,iBCQDC,EAbE,SAACP,GACd,OACI,yBAAKF,UAAU,kBACX,yBAAKU,IAAKR,EAAMS,MAAOC,IAAI,KAC3B,yBAAKZ,UAAU,QACX,4BAAKE,EAAMW,OACX,4BAAKX,EAAMY,QACX,2BAAIZ,EAAMa,cCYXC,EAlBE,SAACd,GACd,OACI,yBAAKF,UAAU,QAEPE,EAAMe,MAAMC,KAAI,SAACC,EAAMC,GACnB,OAAO,kBAAC,EAAD,CACCC,IAAKD,EACLT,MAAOQ,EAAKG,WAAWC,WAAWC,UAClCX,MAAOM,EAAKG,WAAWT,MACvBC,OAAQK,EAAKG,WAAWG,QACxBV,UAAWI,EAAKG,WAAWI,qBC0BxCC,E,kDAjCX,WAAazB,GAAQ,IAAD,8BAChB,cAAMA,IAOVE,WAAa,SAACwB,GACVA,EAAEC,iBACFC,IACKC,IAAI,+CACJC,MAAM,CAAEC,EAAG,EAAKC,MAAMC,cACtBC,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEvB,MAAM,YAAKoB,EAAKI,KAAKC,aAf7B,EAmBpBnC,aAAe,SAACqB,GACZU,QAAQC,IAAIX,EAAEe,OAAOC,OACrB,EAAKJ,SAAS,CAAEL,YAAaP,EAAEe,OAAOC,SAnBtC,EAAKV,MAAQ,CACTjB,MAAO,GACPkB,YAAa,IAJD,E,0CAwBpB,WACI,OAAO,6BACC,kBAAC,EAAD,CAAY/B,WAAYyC,KAAKzC,WAAYG,aAAcsC,KAAKtC,eAC5D,kBAAC,EAAD,CAAUU,MAAO4B,KAAKX,MAAMjB,a,GA5BxB6B,aCULC,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCAC,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,WAK1B1B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB0B,OAAM,SAAAC,GACL5B,QAAQ4B,MAAM,4CAA6CA,MChEnEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDchC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBtB,OAAOC,UAC3CsB,SAAWvB,OAAOC,SAASsB,OAIvC,OAGFvB,OAAOwB,iBAAiB,QAAQ,WAC9B,IAAMnB,EAAK,UAAMiB,GAAN,sBAENxB,EAwCX,SAAiCO,GAE/BoB,MAAMpB,GACHnB,MAAK,SAAAwC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ/C,IAAI,gBAAgBgD,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM5C,MAAK,SAAAuB,GACjCA,EAAasB,aAAa7C,MAAK,WAC7Bc,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBU,OAAM,WACL3B,QAAQC,IACN,oEAzDA4C,CAAwB5B,GAHxBD,EAAgBC,OC7B1B6B,K","file":"static/js/main.1f43847b.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBookOpen } from '@fortawesome/free-solid-svg-icons'\n\nconst Header = () => {\n    return (\n        <header>\n            <FontAwesomeIcon icon={faBookOpen} className=\"fa-2x\"/>\n            <h1>Search Books</h1>\n        </header>\n    )\n}\n\nexport default Header\n\n","import React from 'react';\n\nconst SearchArea = (props) => {\n    return (\n        <div className=\"search-area\">\n            <form onSubmit={props.searchBook} action=\"\">\n                <input onChange={props.handleSearch} type=\"text\" />\n                <button type=\"submit\">Search</button>\n            </form>\n        </div>\n    )\n}\n\nexport default SearchArea\n","import React from 'react'\n\nconst BookCard = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img src={props.image} alt=\"\" />\n            <div className=\"desc\">\n                <h2>{props.title}</h2>\n                <h3>{props.author}</h3>\n                <p>{props.published}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default BookCard\n","import React from 'react'\nimport BookCard from '../BookCard'\n\nconst BookList = (props) => {\n    return (\n        <div className=\"list\">\n            {\n                props.books.map((book, i) => {\n                    return <BookCard \n                            key={i}\n                            image={book.volumeInfo.imageLinks.thumbnail}\n                            title={book.volumeInfo.title}\n                            author={book.volumeInfo.authors}\n                            published={book.volumeInfo.publishedDate}\n                        />\n                })\n            }\n        </div>\n    )\n}\n\nexport default BookList\n","import React, { Component, setState } from 'react';\nimport SearchArea from \"../SearchArea\";\nimport request from 'superagent';\nimport BookList from '../BookList';\n\nclass Books extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            books: [],\n            searchField: ''\n        }\n    }\n\n    searchBook = (e) => {\n        e.preventDefault();\n        request\n            .get(\"https://www.googleapis.com/books/v1/volumes\")\n            .query({ q: this.state.searchField })\n            .then((data) => {\n                console.log(data);\n                this.setState({ books: [...data.body.items]})\n            })\n    }\n\n    handleSearch = (e) => {\n        console.log(e.target.value);\n        this.setState({ searchField: e.target.value })\n    }\n\n    render() {\n        return <div>\n                <SearchArea searchBook={this.searchBook} handleSearch={this.handleSearch}/>\n                <BookList books={this.state.books} />\n                </div>\n\n    }\n\n}\nexport default Books;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\"\nimport Books from \"./components/Books\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Books />\n    </div>\n  );\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === \"[::1]\" ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (!isLocalhost) {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        } else {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log(\"New content is available; please refresh.\");\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          \"No internet connection found. App is running in offline mode.\"\n        );\n      });\n  }\n  \n  export function unregister() {\n    if (\"serviceWorker\" in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}